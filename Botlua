local VERSION = "2.5.5"

local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local textChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")

local selectedLanguage = nil
local isSending = false

-- Chat sending function
local oldChat
if textChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    oldChat = false
else
    oldChat = true
end

local function Chat(msg)
    if not oldChat then
        textChatService.TextChannels.RBXGeneral:SendAsync(msg)
    else
        replicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    end
end

-- Notify helper
local function notify(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5
    })
end

-- Language letter map with vowel and consonant handling
local alphabets = {
    ["1"] = { -- Chinese (approx)
        A = "啊", B = "贝", C = "西", D = "的", E = "诶", F = "艾弗", G = "吉",
        H = "艾尺", I = "伊", J = "杰", K = "开", L = "艾勒", M = "艾姆", N = "艾娜",
        O = "哦", P = "屁", Q = "苦", R = "艾儿", S = "艾丝", T = "提", U = "优",
        V = "维", W = "豆贝尔维", X = "艾克斯", Y = "吾艾", Z = "贼德"
    },
    ["2"] = { -- Russian (Cyrillic transliteration)
        A = "А", B = "Б", C = "С", D = "Д", E = "Е", F = "Ф", G = "Г",
        H = "Х", I = "И", J = "Й", K = "К", L = "Л", M = "М", N = "Н",
        O = "О", P = "П", Q = "К", R = "Р", S = "С", T = "Т", U = "У",
        V = "В", W = "В", X = "КС", Y = "Ы", Z = "З"
    },
    ["3"] = { -- Japanese Hiragana (simplified phonetics)
        A = "あ", B = "ば", C = "し", D = "で", E = "え", F = "ふ", G = "ぐ",
        H = "は", I = "い", J = "じ", K = "け", L = "る", M = "む", N = "ん",
        O = "お", P = "ぴ", Q = "きゅ", R = "ら", S = "す", T = "て", U = "う",
        V = "ゔ", W = "わ", X = "えっくす", Y = "や", Z = "ぜ"
    }
}

-- Translate message based on letter map
local function translateMessageLetters(msg, lang)
    local map = alphabets[lang]
    if not map then return msg end

    local result = {}
    for i = 1, #msg do
        local c = msg:sub(i,i)
        local upper = c:upper()
        if map[upper] then
            table.insert(result, map[upper])
        else
            table.insert(result, c)
        end
    end
    return table.concat(result)
end

-- Language picker prompt
notify("Language Selection", "Hello! Pick your language:\n1 - Chinese\n2 - Russian\n3 - Japanese", 10)

-- On chat input
localPlayer.Chatted:Connect(function(msg)
    if isSending then
        isSending = false
        return
    end

    if not selectedLanguage then
        if msg == "1" or msg == "2" or msg == "3" then
            selectedLanguage = msg
            notify("Language Selected", "You chose option " .. selectedLanguage .. ".", 5)
            isSending = true
            Chat("You selected language option " .. selectedLanguage .. ". Your messages will now be translated.")
        else
            notify("Invalid Choice", "Type 1, 2, or 3 to choose language.", 5)
        end
    else
        local translated = translateMessageLetters(msg, selectedLanguage)
        isSending = true
        Chat(translated)
    end
end)
