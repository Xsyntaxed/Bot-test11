local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local SayMessageRequest = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")

local selectedLanguage = nil
local translationEnabled = false
local lastSendTime = 0
local cooldown = 2
local debounce = false

local translations = {
	["Chinese"] = {
		["hi"] = "你好", ["hello"] = "你好", ["how are you"] = "你好吗", ["yes"] = "是", ["no"] = "不", ["bye"] = "再见"
	},
	["Russian"] = {
		["hi"] = "привет", ["hello"] = "здравствуйте", ["how are you"] = "как дела", ["yes"] = "да", ["no"] = "нет", ["bye"] = "пока"
	},
	["Japanese"] = {
		["hi"] = "こんにちは", ["hello"] = "こんにちは", ["how are you"] = "お元気ですか", ["yes"] = "はい", ["no"] = "いいえ", ["bye"] = "さようなら"
	}
}

-- ✅ Show startup notification
StarterGui:SetCore("SendNotification", {
	Title = "Hello!",
	Text = "Pick your language:\n1 = Chinese\n2 = Russian\n3 = Japanese",
	Duration = 5
})

-- ✅ Send a message using the legacy system
local function Send(msg)
	SayMessageRequest:FireServer(msg, "All")
end

-- ✅ Translation logic
local function translate(text)
	local words = {}
	for word in text:lower():gmatch("%S+") do
		local translated = translations[selectedLanguage][word] or word
		table.insert(words, translated)
	end
	return table.concat(words, " ")
end

TextChatService.MessageReceived:Connect(function(messageObj)
	local sender = Players:GetPlayerByUserId(messageObj.TextSource.UserId)
	if not sender or sender ~= player then return end

	local text = messageObj.Text

	-- ✅ Handle language selection
	if not translationEnabled then
		if text == "1" then
			selectedLanguage = "Chinese"
		elseif text == "2" then
			selectedLanguage = "Russian"
		elseif text == "3" then
			selectedLanguage = "Japanese"
		end

		if selectedLanguage then
			translationEnabled = true
			StarterGui:SetCore("SendNotification", {
				Title = "Language Selected",
				Text = "You selected " .. selectedLanguage,
				Duration = 3
			})
		end
		return
	end

	-- ✅ Stop command
	if text == "?stop" then
		translationEnabled = false
		selectedLanguage = nil
		StarterGui:SetCore("SendNotification", {
			Title = "Translation Stopped",
			Text = "Translation has been disabled.",
			Duration = 3
		})
		return
	end

	-- ✅ Prevent spam and freezing
	if translationEnabled and not debounce and (tick() - lastSendTime >= cooldown) then
		debounce = true
		lastSendTime = tick()

		local translatedText = translate(text)
		if translatedText ~= text then
			task.wait(0.5) -- short delay for safety
			Send(text) -- original message
			task.wait(0.5)
			Send(translatedText) -- translated message
		end

		task.delay(1, function()
			debounce = false
		end)
	end
end)
