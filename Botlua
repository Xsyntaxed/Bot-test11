local VERSION = "2.5.5"

local letters = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"}
local userCooldowns = {}
local currentQuestion
local questionAnsweredBy
local quizRunning = false

local HttpService = game:GetService("HttpService")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer
local blockedPlayers = {}
local whiteListedplayers = {}
local mode = "Quiz"
local answeredCorrectly = {}
local submittedAnswer = {}
local awaitingAnswer = false
local questionPoints = 1
local timeSinceLastMessage = tick()
local placeId = game.PlaceId
local replicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local textChatService = game:GetService("TextChatService")

local quizCooldown = false
local answerOptionsSaid = 0
local minMessageCooldown = 2.3
local whiteListEnabled = false

local ContextActionService = game:GetService("ContextActionService")
local UserInputService = game:GetService("UserInputService")

-- Settings
local settings = {
    questionTimeout = 10,
    userCooldown = 5,
    sendLeaderBoardAfterQuestions = 0,
    automaticLeaderboards = true,
    automaticCurrentQuizLeaderboard = false,
    automaticServerQuizLeaderboard = true,
    signStatus = true,
    romanNumbers = true,
    autoplay = false,
    repeatTagged = true,
    sendDetailedCategorylist = false,
    removeLeavingPlayersFromLB = true,
}

local oldChat
if textChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    oldChat = false
else
    oldChat = true
end

local function Chat(msg)
    if not oldChat then
        textChatService.TextChannels.RBXGeneral:SendAsync(msg)
    else
        replicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
    end
end

-- Language alphabet maps --
local alphabets = {
    ["1"] = { -- Chinese pinyin style (simplified mapping)
        A = "ā", B = "b", C = "c", D = "d", E = "ē",
        F = "f", G = "g", H = "h", I = "ī", J = "j",
        K = "k", L = "l", M = "m", N = "n", O = "ō",
        P = "p", Q = "q", R = "r", S = "s", T = "t",
        U = "ū", V = "v", W = "w", X = "x", Y = "y", Z = "z",
        [" "] = " "
    },
    ["2"] = { -- Russian Cyrillic approximate
        A = "А", B = "Б", C = "Ц", D = "Д", E = "Е",
        F = "Ф", G = "Г", H = "Х", I = "И", J = "Й",
        K = "К", L = "Л", M = "М", N = "Н", O = "О",
        P = "П", Q = "К", R = "Р", S = "С", T = "Т",
        U = "У", V = "В", W = "В", X = "Кс", Y = "Ы", Z = "З",
        [" "] = " "
    },
    ["3"] = { -- Japanese Hiragana approx (romanji to hiragana single letters)
        A = "あ", B = "ぶ", C = "く", D = "ど", E = "え",
        F = "ふ", G = "ぐ", H = "は", I = "い", J = "じ",
        K = "か", L = "る", M = "む", N = "ん", O = "お",
        P = "ぷ", Q = "く", R = "る", S = "す", T = "と",
        U = "う", V = "ゔ", W = "わ", X = "くす", Y = "い", Z = "ず",
        [" "] = " "
    }
}

local chosenLanguage = nil
local translatingEnabled = false

-- Notify to choose language
StarterGui:SetCore("SendNotification", {
    Title = "Language Selection",
    Text = "Hello! Pick your language:\n1 - Chinese\n2 - Russian\n3 - Japanese",
    Duration = 10
})

-- Handle chat message intercept and translation
local function onPlayerChatted(player, message)
    if player ~= localPlayer then return end

    if not translatingEnabled then
        -- If not translating, check if they pick a language
        if message == "1" or message == "2" or message == "3" then
            chosenLanguage = message
            translatingEnabled = true
            StarterGui:SetCore("SendNotification", {
                Title = "Language Selected",
                Text = "You chose language " .. chosenLanguage,
                Duration = 5
            })
            return -- Don't send original language pick message to chat
        end
        return -- No translation active yet, let messages go normally
    else
        -- If translation enabled, check for stop command
        if message:lower() == "?stop" then
            translatingEnabled = false
            chosenLanguage = nil
            StarterGui:SetCore("SendNotification", {
                Title = "Translation Stopped",
                Text = "You stopped the language translation.",
                Duration = 5
            })
            return -- Don't send stop command message to chat
        end
    end

    -- Translate message letter by letter
    if translatingEnabled and chosenLanguage and alphabets[chosenLanguage] then
        local langMap = alphabets[chosenLanguage]
        local translated = ""
        message = message:upper()
        for i = 1, #message do
            local c = message:sub(i,i)
            if langMap[c] then
                translated = translated .. langMap[c]
            else
                translated = translated .. c
            end
        end
        Chat(translated)
        return -- Block original message sending
    end
end

players.PlayerChatted:Connect(onPlayerChatted)

-- Send initial greeting in chat
task.wait(1)
Chat("Hi! Please pick your language by typing 1 (Chinese), 2 (Russian), or 3 (Japanese) .")
