local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local playerName = player.Name
local translationEnabled = false
local selectedLanguage = nil
local lastProcessedMessage = ""

-- Translation dictionaries
local translations = {
	["Chinese"] = {
		["hi"] = "你好", ["hello"] = "你好", ["how are you"] = "你好吗", ["yes"] = "是", ["no"] = "不", ["bye"] = "再见"
	},
	["Russian"] = {
		["hi"] = "привет", ["hello"] = "здравствуйте", ["how are you"] = "как дела", ["yes"] = "да", ["no"] = "нет", ["bye"] = "пока"
	},
	["Japanese"] = {
		["hi"] = "こんにちは", ["hello"] = "こんにちは", ["how are you"] = "お元気ですか", ["yes"] = "はい", ["no"] = "いいえ", ["bye"] = "さようなら"
	}
}

-- Prevent spam
local lastSentTime = 0
local cooldown = 1.5

-- Choose language function
local function chooseLanguage(message)
	if message == "1" then
		selectedLanguage = "Chinese"
	elseif message == "2" then
		selectedLanguage = "Russian"
	elseif message == "3" then
		selectedLanguage = "Japanese"
	end

	if selectedLanguage then
		translationEnabled = true
		StarterGui:SetCore("SendNotification", {
			Title = "Language Selected",
			Text = "You selected " .. selectedLanguage,
			Duration = 3
		})
	end
end

-- Translate function
local function translateMessage(message)
	local lower = string.lower(message)
	local words = {}
	for word in lower:gmatch("%S+") do
		table.insert(words, word)
	end

	local translated = ""
	for _, word in ipairs(words) do
		local translatedWord = translations[selectedLanguage][word] or word
		translated = translated .. translatedWord .. " "
	end

	return translated:sub(1, -2) -- remove trailing space
end

-- Main chat listener
TextChatService.MessageReceived:Connect(function(chatMessage)
	if chatMessage.TextSource then
		local sender = Players:GetPlayerByUserId(chatMessage.TextSource.UserId)
		if sender and sender == player then
			local message = chatMessage.Text

			-- Stop command
			if message == "?stop" then
				translationEnabled = false
				selectedLanguage = nil
				StarterGui:SetCore("SendNotification", {
					Title = "Translation Disabled",
					Text = "Translation has been stopped.",
					Duration = 3
				})
				return
			end

			-- Language choice
			if not translationEnabled then
				chooseLanguage(message)
				return
			end

			-- Avoid double-processing or spamming
			if message == lastProcessedMessage or (tick() - lastSentTime) < cooldown then return end
			lastProcessedMessage = message
			lastSentTime = tick()

			-- Translate and send
			local translated = translateMessage(message)
			if translated ~= message then
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(translated, "All")
			end
		end
	end
end)
