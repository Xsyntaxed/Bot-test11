-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TextChatService = game:GetService("TextChatService")

-- Variables
local player = Players.LocalPlayer
local SayMessageRequest = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") 
    and ReplicatedStorage.DefaultChatSystemChatEvents:FindFirstChild("SayMessageRequest")

local lastMessage = ""
local quizActive = false
local currentCategory = nil
local currentQuestionIndex = 0
local currentQuestionData = nil
local questionTimer = nil
local playerScores = {}
local answeringEnabled = false

local categories = {
    ["Math"] = {
        { q = "What is the derivative of x^2?", a = "B", c = {"x", "2x", "x^2", "2"}, correct = "2x" },
    },
    ["Science"] = {
        { q = "What gas do plants absorb?", a = "C", c = {"Oxygen", "Nitrogen", "Carbon Dioxide", "Hydrogen"}, correct = "Carbon Dioxide" },
    },
    ["English"] = {
        { q = "Which is a synonym of 'happy'?", a = "A", c = {"Joyful", "Angry", "Sad", "Tired"}, correct = "Joyful" },
    },
    ["History"] = {
        { q = "Who was the first US president?", a = "D", c = {"John Adams", "Thomas Jefferson", "Abraham Lincoln", "George Washington"}, correct = "George Washington" },
    },
    ["Sports"] = {
        { q = "How many players on a football team?", a = "B", c = {"9", "11", "10", "12"}, correct = "11" },
    },
    ["Biology"] = {
        { q = "What part of the cell contains DNA?", a = "C", c = {"Ribosome", "Cytoplasm", "Nucleus", "Membrane"}, correct = "Nucleus" },
    },
    ["Memes"] = {
        { q = "What does 'sus' come from?", a = "D", c = {"Facebook", "Twitch", "YouTube", "Among Us"}, correct = "Among Us" },
    },
    ["Brainrot"] = {
        { q = "What's 9 + 10?", a = "B", c = {"19", "21", "20", "18"}, correct = "21" },
    },
    ["Games"] = {
        { q = "Which game has 'Creepers'?", a = "A", c = {"Minecraft", "Roblox", "Fortnite", "Valorant"}, correct = "Minecraft" },
    },
    ["WW1"] = {
        { q = "When did WW1 start?", a = "C", c = {"1910", "1912", "1914", "1916"}, correct = "1914" },
    },
}

-- Send a message in chat
local function say(msg)
    if SayMessageRequest then
        SayMessageRequest:FireServer(msg, "All")
    else
        local ch = TextChatService.TextChannels and TextChatService.TextChannels:FindFirstChild("RBXGeneral")
        if ch then ch:SendAsync(msg) end
    end
end

-- Show popup
local function notify(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = 5
        })
    end)
end

-- Show category list
local function showCategories()
    local msg = "Pick a category by typing its name:\n"
    for name, _ in pairs(categories) do
        msg = msg .. "- " .. name .. "\n"
    end
    say(msg)
end

-- Start the quiz
local function startCategory(cat)
    if not categories[cat] then
        say("❌ Invalid category.")
        return
    end
    quizActive = true
    currentCategory = cat
    currentQuestionIndex = 0
    playerScores = {}
    say("📚 Starting quiz: " .. cat)
    askNextQuestion()
end

-- Ask the next question
function askNextQuestion()
    currentQuestionIndex += 1
    local questions = categories[currentCategory]
    if currentQuestionIndex > #questions then
        endQuiz()
        return
    end
    currentQuestionData = questions[currentQuestionIndex]
    local q = currentQuestionData
    local choices = ""
    for i, opt in ipairs(q.c) do
        choices = choices .. string.char(64+i) .. ". " .. opt .. "\n"
    end
    say("❓ " .. q.q .. "\n" .. choices .. "(10 seconds to answer)")
    answeringEnabled = true
    task.delay(10, function()
        if answeringEnabled then
            say("⏰ Time's up! The correct answer was: " .. q.correct)
            answeringEnabled = false
            askNextQuestion()
        end
    end)
end

-- End the quiz and show scoreboard
function endQuiz()
    quizActive = false
    answeringEnabled = false
    say("🏁 Quiz finished! Scoreboard:")
    local scores = {}
    for name, pts in pairs(playerScores) do
        table.insert(scores, {name = name, score = pts})
    end
    table.sort(scores, function(a, b) return a.score > b.score end)
    for i, data in ipairs(scores) do
        local medal = i == 1 and "🥇" or i == 2 and "🥈" or i == 3 and "🥉" or "🎖️"
        say(medal .. data.name .. " (" .. data.score .. ")")
    end
end

-- Chat message listener
function handleMessage(text, sender)
    if not quizActive and categories[text] then
        startCategory(text)
        return
    end
    if text:lower() == "/stopquiz" and player == sender then
        say("🛑 Quiz stopped by host.")
        quizActive = false
        return
    end
    if quizActive and answeringEnabled then
        local q = currentQuestionData
        if q then
            local correct = q.correct:lower()
            if text:lower() == q.a:lower() or text:lower() == correct then
                answeringEnabled = false
                local name = sender.Name
                playerScores[name] = (playerScores[name] or 0) + 1
                say("✅ " .. name .. " got it right! +1 point")
                askNextQuestion()
            end
        end
    end
end

-- Hook up chat
if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    TextChatService.MessageReceived:Connect(function(msg)
        if msg.TextSource then
            local sender = Players:GetPlayerByUserId(msg.TextSource.UserId)
            if sender then
                handleMessage(msg.Text, sender)
            end
        end
    end)
else
    for _, plr in pairs(Players:GetPlayers()) do
        plr.Chatted:Connect(function(msg)
            handleMessage(msg, plr)
        end)
    end
    Players.PlayerAdded:Connect(function(plr)
        plr.Chatted:Connect(function(msg)
            handleMessage(msg, plr)
        end)
    end)
end

-- Notify script is ready
notify("Quiz Bot", "Type any category name to begin!")
say("🤖 Quiz Bot is active! Type a category name to start. Type /stopquiz to cancel.")
showCategories()
